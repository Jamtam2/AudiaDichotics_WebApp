<!--Test page for DWT List 1 Contains everything for completing and submitting a test  -->
<link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/css/bootstrap4-toggle.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>
<style>
  div.sticky {
      position: -webkit-sticky; /* Safari */
      position: sticky;
      top: 0;
  }

  /* Center buttons in the table cells */
  .btn-group-toggle {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    width: 100%; /* Set the width to 100% to make buttons occupy the entire cell */
  }

  /* Make the font larger */
  .btn.btn-outline-primary {
    font-size: 16px; /* Adjust the font size as needed */
    /* Remove margin and min-width properties */
  }

  .left-column {
    background-color: lightblue;
  }

  .right-column {
    background-color: lightpink;
  }

  .ear-advantage {
    background-color: white;
  }

  .ear-advantage.positive {
    background-color: lightblue;
  }

  .ear-advantage.negative {
    background-color: lightpink;
  }

  .play-pause {
    background-color: #008cba;
    height: 40px;
    width: 100%;
    padding: 0.375rem 0.5rem;
    border: 1px solid transparent;
    border-radius: 7.5px;
    transition: transform 0.3s ease;
    transform-origin: center;
  }

  .play-pause:hover {
    background-color: #0082ae;
    transform: scale(1.05);
  }
</style>

<body id="defBG" style="font-family: Arial !important; margin-bottom: 60px;">
  <div class="p-5 border bg-white ">
    <h1 class= "display-5", style= 'padding-bottom:20px' ><strong><%= "Training " + @client.first_name + " " + @client.last_name%></strong></h1>
    <%= form_with model: [@client, @week_two], local: true, html: { multipart: true } do |f| %>
      <div class="container">
        <div class="row">
          <div class="col-sm">
            <div class="form-group">
              <div>
                <p>Ear Dominance</p>
                <div style="display: flex;">
                  <%= button_to "Set Left Dominance", "#", class: "btn-1 btn-anim1", style: "min-width: 150px; margin-right:20px;" %>
                  <%= button_to "Set Right Dominance", "#", class: "btn-1 btn-anim1", style: "min-width: 150px;" %>
                </div>
              </div>
            </div>
            <div class="form-group">
              <div>
                <p>Audio Controls</p>
                <div id="controls">
                  <%= image_tag "pause.svg", id: "pauseButton", class: "play-pause", style: "display: none;" %>
                  <%= image_tag "play.svg", id: "playButton", class: "play-pause" %>
                </div>
                <p>Time Elapsed: <span id="timer">0:00</span> / <span id="duration">--:--</span></p>
              </div>
            </div>
            <div class="form-group">
              <label for="exampleLabel">Label</label>
              <%= f.text_field :label, class: "form-control", type: "text", id: "exampleLabel", value: "Week Two Test Four" %>
            </div>
            <div class="form-group">
              <label for="clientName">Client</label>
              <input class="form-control" type="text" id="clientName" placeholder="<%= @client.first_name + ' ' + @client.last_name %>" readonly>
            </div>
            <div class="form-group">
              <label for="testType">Type</label>
              <input class="form-control" type="text" id="testType" placeholder="Dichotic Words" readonly>
            </div>
            <hr>
            <div class="sticky">
              <label for="Notes">Notes</label>
              <%= f.text_area :notes, class: 'form-control', rows: '3' %>
              <hr>
              <!--AUDIO PLAYER FOR AUDIO FILES STORED IN ASSETS/AUDIO/ETC.MP3-->
              <!-- ALLEARS Edited by Layton, removed default controls and added ids for easier access across javascript, html, and so-->
              <%= audio_tag "Dichotic Words Track 11_R.wav", id: "testAudio", controls: false %>

              <!-- JavaScript to Handle Playback and Timer -->
              <script>
                document.addEventListener("DOMContentLoaded", function() {
                  const leftAudio = document.getElementById("testAudio");
                  const playButton = document.getElementById("playButton");
                  const pauseButton = document.getElementById("pauseButton");
                  const timerDisplay = document.getElementById("timer");
                  const durationDisplay = document.getElementById("duration");

                  // Function to format time as mm:ss
                  function formatTime(seconds) {
                    const minutes = Math.floor(seconds / 60);
                    const secs = Math.floor(seconds % 60);
                    return `${minutes}:${secs < 10 ? "0" : ""}${secs}`;
                  }

                  // Set total duration when data is loaded
                  testAudio.addEventListener("loadedmetadata", function() {
                    durationDisplay.textContent = formatTime(testAudio.duration);
                  });

                  // Update timer
                  testAudio.addEventListener("timeupdate", function() {
                    timerDisplay.textContent = formatTime(testAudio.currentTime);
                  });

                  // Play audio file
                  playButton.addEventListener("click", function() {
                    playButton.style.display = "none";
                    pauseButton.style.display = "inline";
                    testAudio.play();
                  });

                  // Pause audio file
                  pauseButton.addEventListener("click", function() {
                    playButton.style.display = "inline";
                    pauseButton.style.display = "none";
                    testAudio.pause();
                  });
                });
              </script>
              <!--Table for ear advantage percentage that is calculated in the script-->
              <p>Scores:</p>
              <table class="table table-sm table-bordered m1-4" style="max-width: 25rem;">
                <thead>
                  <tr>
                    <th scope="col">Pairs</th>
                    <th scope="col">Left</th>
                    <th scope="col">Right</th>
                    <th scope="col">Ear Adv</th>
                  </tr>
                  <tbody>
                    <tr>
                      <th scope="row">1</th>
                      <td class="left-column"><span id="column1-percent">0</span>%</p></td>
                      <td class="right-column"><span id="column2-percent">0</span>%</td>
                      <td class="ear-advantage"><span id="advantage-Diff">0</span>%</td>
                    </tr>
                  </tbody>
                </thead>
              </table>

              <!--Table for ear advantage that is calculated in the script and ear diagnosis/interpretation-->
              <label for="read-Only">Ear Advantage</label>
              <input class="form-control" type="text" id="read-Only" value="" readonly>
              <span hidden id="advantage-Name"></span>
            </div>
          </div>

          <div style="width: 1px; height: inherit; background-color: rgba(0, 0, 0, 0.1);"></div>

          <div class="col-sm" style="flex-grow: 3;">
            <table class="table table-sm table-striped" style="max-width: 25rem; margin: 0 auto 1rem;">
              <thead class="thead-dark">
                <tr>
                  <th>Number</th>
                  <th>Left</th>
                  <th>Right</th>
                </tr>
              </thead>
              <tbody>
                <!-- Loop for table of words and creation of all buttons, only loops 20 times and creates table for buttons-->
                <!--Track 11-->
                <% 20.times do |i| %>
                  <% words = [
                    ["Well", "Bar"],
                    ["Smooth", "West"],
                    ["Tan", "Knit"],
                    ["King", "When"],
                    ["Met", "This"],
                    ["Tin", "Stiff"],
                    ["Hang", "Chair"],
                    ["Chin", "Yes"],
                    ["There", "Cook"],
                    ["Don", "His"],
                    ["Wash", "Lot"],
                    ["Lose", "Catch"],
                    ["Shown", "Pass"],
                    ["Hug", "Rob"],
                    ["Thick", "Shown"],
                    ["Nag", "Wire"],
                    ["Crime", "Web"],
                    ["Jet", "Mop"],
                    ["Rob", "Dive"],
                    ["Shed", "Fade"]
                    ] %>
                  <tr>
                    <td><%= i + 1 %></td>
                    <td>
                      <div class="btn-group-toggle" data="buttons">
                        <label class="btn btn-outline-primary column1-button">
                          <input type="checkbox" name="column1[<%= i %>][]" value="1"> <%= words[i][0] %>
                        </label>
                      </div>
                    </td>
                    <td>
                      <div class="btn-group-toggle" data="buttons">
                        <label class="btn btn-outline-primary column2-button">
                          <input type="checkbox" name="column1[<%= i %>][]" value="2"> <%= words[i][1] %>
                        </label>
                      </div>
                    </td>
                  </tr>
                <% end %>
              </tbody>
            <!--Hidden table for submition items-->
            </table>

            <%= f.hidden_field :client_name, value: "Example user" %>
            <%= f.hidden_field :test_type, value: "DWT" %>
            <%= f.hidden_field :counter, value: "4" %>
            <%= f.hidden_field :left_score, id: "left_score" %>
            <%= f.hidden_field :right_score, id: "right_score" %>
            <%= f.hidden_field :ear_advantage, id: "ear_advantage" %>
            <%= f.hidden_field :ear_advantage_score, id: "ear_advantage_score" %>

            <!-- AllEARS -->
            <%= f.hidden_field :right_ear_decibel, id: "rightEarDecibelField" %>
            <%= f.hidden_field :right_ear_decibel, id: "leftEarDecibelField" %>
            <!--  try a 'test' button that just updates the value to check if this is an issue here - also try to check client.rb, no handler for right_ear mightr be the problem?-->

            <!-- <%= f.submit "Submit", class: "btn btn-primary btn-block", onclick: "populateHiddenFields()" %> -->
            <%= f.submit "Submit and Proceed", class: "btn-1 btn-anim2 btn-block", onclick: "calculateRightEarDecibel(); populateHiddenFields();" %>
            <%= link_to "Back",  week_two_test_two_client_week_twos_path(@client), class: "btn-2 btn-anim2 btn-block"%>
        </div>
        <script>




          //function for keeping the buttons blue after being clicked
          const checkboxes = document.querySelectorAll('input[type="checkbox"]');

          checkboxes.forEach(function(checkbox) {
            checkbox.addEventListener('change', function() {
              const label = this.closest('label');
              if (this.checked) {
                label.classList.add('active');
              } else {
                label.classList.remove('active');
              }
            });
          });

          //script completes all logic for calculating diagnosis and ear advantage values, It updates the percentages and lists the ear diag and advantage
          // Get the toggle buttons and count elements
          const column1Buttons = document.querySelectorAll(".column1-button input[type='checkbox']");
          const column2Buttons = document.querySelectorAll(".column2-button input[type='checkbox']");
          const allButtons = document.querySelectorAll(".column1-button input[type='checkbox'], .column2-button input[type='checkbox']");
          const column1Count = document.getElementById("column1-count");
          const column2Count = document.getElementById("column2-count");
          const column1Percent = document.getElementById("column1-percent");
          const column2Percent = document.getElementById("column2-percent");
          const advantageDiff = document.getElementById("advantage-Diff");
          const advantageName = document.getElementById("advantage-Name");
          const testDiagnosis = document.getElementById("Diagnosis");
          const readOnly = document.getElementById("read-Only");
          const readOnlyDiag = document.getElementById("read-Only-diag");

          //ALL EARS ADDITION
          //TODO REMOVE POLACEHOLDER
          let decibel = 9999999999;

          // Update the counts when a button is clicked

          allButtons.forEach(function(button) {
            button.addEventListener("click", function() {
            const checkedCount1 = document.querySelectorAll(".column1-button input[type='checkbox']:checked").length;
            const checkedCount2 = document.querySelectorAll(".column2-button input[type='checkbox']:checked").length;
            const totalCount1 = column1Buttons.length;
            const totalCount2 = column2Buttons.length;
            const percent1 = parseFloat((checkedCount1 / totalCount1) * 100).toFixed(2);
            const percent2 = parseFloat((checkedCount2 / totalCount2) * 100).toFixed(2);
            const advantage = (percent2 - percent1).toFixed(2);
            const avgPercent = ((+percent1 + +percent2) / 2).toFixed(2);

            //ALLEARS ADDITIONS
            let rightEarDecibel; // Default hardcoded value, CHANGE TO SERVER-side later (SO GET VALUE instead hard code)
            let leftEarDecibel; // this is not yet attempted set up for server side at all, unlike right

            let direction = null;
            let interpretation = null;
            let age = 40;
            let dom = null;
            let nondom = null;
            if (advantage < 0) {
              direction = "Left";
              dom = percent1;
              nondom = percent2;
            } else if (advantage > 0) {
              direction = "Right";
              dom = percent2;
              nondom = percent1;
            } else {
              direction = "Neutral";
              }
            // IF else logic for diagnosis based on the childs age. Still unsure if this works as intended accoring to Employer, but we believe it does
            // if (age == 5 || age == 6){
            //   if (direction == "Neutral"){
            //     if (percent1 <= 44){
            //       interpretation = "Dichotic Dysaudia";
            //     }
            //     else{
            //       interpretation = "Within Normal Limits";
            //     }
            //   }
            //   else{
            //     if (((dom <= 64) || (nondom <= 44)) && ((advantage <= -32) || (advantage >= 32))){
            //       interpretation = "Amblyaudia + Dichotic Dysaudia";
            //     }
            //     else if ((dom <= 64) || (nondom <= 44)){
            //       interpretation = "Dichotic Dysaudia";
            //     }
            //     else if (((dom > 64) && (nondom > 44)) && (advantage <= -32)){
            //       interpretation = "Ambylaudia Right Ear Dominant";
            //     }
            //     else if (((dom > 64) && (nondom > 44)) && (advantage >= 32)){
            //       interpretation = "Ambylaudia Left Ear Dominant";
            //     }
            //     else{
            //       interpretation = "Within Normal Limits";
            //     }
            //   }
            // }
            // if (age >= 7 && age <= 9){
            //   if (direction == "Neutral"){
            //     if (percent1 <= 60){
            //       interpretation = "Dichotic Dysaudia";
            //     }
            //     else{
            //       interpretation = "Within Normal Limits";
            //     }
            //   }
            //   else{
            //     if (((dom <= 76) || (nondom <= 60)) && ((advantage <= -24) || (advantage >= 24))){
            //       interpretation = "Amblyaudia + Dichotic Dysaudia";
            //     }
            //     else if ((dom <= 76) || (nondom <= 60)){
            //       interpretation = "Dichotic Dysaudia";
            //     }
            //     else if (((dom > 76) && (nondom > 60)) && (advantage <= -24)){
            //       interpretation = "Ambylaudia Right Ear Dominant";
            //     }
            //     else if (((dom > 76) && (nondom > 60)) && (advantage >= 24)){
            //       interpretation = "Ambylaudia Left Ear Dominant";
            //     }
            //     else{
            //       interpretation = "Within Normal Limits";
            //     }
            //   }
            // }
            // if (age >= 10 && age <= 12){
            //   if (direction == "Neutral"){
            //     if (percent1 <= 72){
            //       interpretation = "Dichotic Dysaudia";
            //     }
            //     else{
            //       interpretation = "Within Normal Limits";
            //     }
            //   }
            //   else{
            //     if (((dom <= 84) || (nondom <= 72)) && ((advantage <= -20) || (advantage >= 20))){
            //       interpretation = "Amblyaudia + Dichotic Dysaudia";
            //     }
            //     else if ((dom <= 84) || (nondom <= 72)){
            //       interpretation = "Dichotic Dysaudia";
            //     }
            //     else if (((dom > 84) && (nondom > 72)) && (advantage <= -20)){
            //       interpretation = "Ambylaudia Right Ear Dominant";
            //     }
            //     else if (((dom > 84) && (nondom > 72)) && (advantage >= 20)){
            //       interpretation = "Ambylaudia Left Ear Dominant";
            //     }
            //     else{
            //       interpretation = "Within Normal Limits";
            //     }
            //   }
            // }
            // if (age >= 13 && age <= 15){
            //   if (direction == "Neutral"){
            //     if (percent1 <= 76){
            //       interpretation = "Dichotic Dysaudia";
            //     }
            //     else{
            //       interpretation = "Within Normal Limits";
            //     }
            //   }
            //   else{
            //     if (((dom <= 92) || (nondom <= 76)) && ((advantage <= -16) || (advantage >= 16))){
            //       interpretation = "Amblyaudia + Dichotic Dysaudia";
            //     }
            //     else if ((dom <= 92) || (nondom <= 76)){
            //       interpretation = "Dichotic Dysaudia";
            //     }
            //     else if (((dom > 92) && (nondom > 76)) && (advantage <= -16)){
            //       interpretation = "Ambylaudia Right Ear Dominant";
            //     }
            //     else if (((dom > 92) && (nondom > 76)) && (advantage >= 16)){
            //       interpretation = "Ambylaudia Left Ear Dominant";
            //     }
            //     else{
            //       interpretation = "Within Normal Limits";
            //     }
            //   }
            // }
            // if (age >= 16 && age <= 18){
            //   if (direction == "Neutral"){
            //     if (percent1 <= 80){
            //       interpretation = "Dichotic Dysaudia";
            //     }
            //     else{
            //       interpretation = "Within Normal Limits";
            //     }
            //   }
            //   else{
            //     if (((dom <= 88) || (nondom <= 80)) && ((advantage <= -14) || (advantage >= 14))){
            //       interpretation = "Amblyaudia + Dichotic Dysaudia";
            //     }
            //     else if ((dom <= 88) || (nondom <= 80)){
            //       interpretation = "Dichotic Dysaudia";
            //     }
            //     else if (((dom > 88) && (nondom > 80)) && (advantage <= -14)){
            //       interpretation = "Ambylaudia Right Ear Dominant";
            //     }
            //     else if (((dom > 88) && (nondom > 80)) && (advantage >= 14)){
            //       interpretation = "Ambylaudia Left Ear Dominant";
            //     }
            //     else{
            //       interpretation = "Within Normal Limits";
            //     }
            //   }
            // }
            // Passes values to strings so they can be pushed to the html above

            //EARS TRAINING ADDITION
            // TESTING ONLY NEEDS LEFT/RIGHT VALUES

            if (percent1 >= percent2 * 1.1) {
              decibel += 5;
            } else if (percent2 >= percent1 * 1.1) {
              decibel += 5;
            }
            // END EARS TRAINING ADDITION

            column1Count.innerText = checkedCount1.toString();
            column1Percent.innerText = percent1.toString();
            column2Count.innerText = checkedCount2.toString();
            column2Percent.innerText = percent2.toString();
            advantageDiff.innerText = advantage.toString();
            advantageName.innerText = direction;
            testDiagnosis.innerText = interpretation;
            readOnly.value = advantageName.innerText;
            readOnlyDiag.value = testDiagnosis.innerText;



              // Get the ear advantage cells
              const earAdvantageCells = document.querySelectorAll('.ear-advantage');
              // Loop through each ear advantage cell
              earAdvantageCells.forEach(cell => {
                // Get the value of the cell
                const value = parseFloat(cell.textContent);

                // Check the value and set the background color accordingly
                if (value < 0) {
                  cell.style.backgroundColor = 'lightblue';
                } else if (value > 0) {
                  cell.style.backgroundColor = 'lightpink';
                } else {
                  cell.style.backgroundColor = 'white';
                }
              });

            })
          })
          // gets the elements from hidden field submit above and populates them from the results in the script
          function populateHiddenFields() {
            document.getElementById("left_score").value = column1Percent.innerText;
            document.getElementById("right_score").value = column2Percent.innerText;
            document.getElementById("ear_advantage").value = advantageName.innerText;
            document.getElementById("ear_advantage_score").value = advantageDiff.innerText;

          }

          //ALLEARS ADDITIONS
          // only works for first group rn, copy paste for more when relevant to test
          function calculateRightEarDecibel() {

            const checkedCount1Group1 = document.querySelectorAll(".column1Group1-button input[type='checkbox']:checked").length;
            const checkedCount2Group1 = document.querySelectorAll(".column2Group1-button input[type='checkbox']:checked").length;



            if (checkedCount1Group1 >= (checkedCount2Group1 * 1.1)) {
              rightEarDecibel = 35;
            }
            // SETS VALUE of hidden field
            document.getElementById("rightEarDecibelField").value = rightEarDecibel;
          }
          //functions for setting ear dominance
          function setEarDominance(dominance) {
          // Assuming rightEarDecibel changes based on ear dominance
            if (dominance === 'left') {
              rightEarDecibel = 50;
              leftEarDecibel = 30;
            } else if (dominance === 'right') {
              rightEarDecibel = 30;
              leftEarDecibel = 50;
            }
            document.getElementById("rightEarDecibelField").value = rightEarDecibel;
            document.getElementById("leftEarDecibelField").value = leftEarDecibel;
            document.getElementById('rightEarDecibelDisplay').innerText = document.getElementById("rightEarDecibelField").value;
            document.getElementById('leftEarDecibelDisplay').innerText = document.getElementById("leftEarDecibelField").value;
          }
          //separate testing function, can be commented/deleted later
          // This is working, problem is with the user data then
          function testRightEarDecibelUpdate() {
            calculateRightEarDecibel();
            // Update display of rightEarDecibel
            document.getElementById('rightEarDecibelDisplay').innerText = document.getElementById("rightEarDecibelField").value;
          }
          //ALLEARS Audio control listener, buttons
          document.addEventListener('DOMContentLoaded', (event) => {
            const leftEarAudio = document.getElementById('leftEarAudio');
            const rightEarAudio = document.getElementById('rightEarAudio');

            // Play button event
            document.getElementById('playButton').addEventListener('click', function() {
              leftEarAudio.play();
              rightEarAudio.play();
            });

            // Pause button event
            document.getElementById('pauseButton').addEventListener('click', function() {
              leftEarAudio.pause();
              rightEarAudio.pause();
            });
            document.getElementById('setLeftDominance').addEventListener('click', function() {
            setEarDominance('left');
            });

            document.getElementById('setRightDominance').addEventListener('click', function() {
            setEarDominance('right');
            });
          });

          function submitAndExit() {
            // Calculate right ear decibel and populate hidden fields
              calculateRightEarDecibel();
              populateHiddenFields();

            // Redirect to the client training index page
              window.location.href = '<%= client_trainings_path(@client) %>';
          }

        </script>
      </div>
    <% end %>
  </div>
</body>
