<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>

<!-- Include jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<!--Test page for RDDT List 1 Contains everything for completing and submitting a test  -->
<link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/css/bootstrap4-toggle.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>

<style>
  div.sticky {
      position: -webkit-sticky; /* Safari */
      position: sticky;
      top: 0;
  }
  /* Center buttons in the table cells */
  .btn-group-toggle {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100%;
    }

  /* Make the font larger */
  .btn.btn-outline-primary {
      font-size: 16px; /* Adjust the font size as needed */
      margin: 5px; /* Add some margin to separate the buttons */
      min-width: 40px; /* Adjust the minimum width as needed */
  }
  .left-column {
      background-color: lightblue;
                  }

  .right-column {
      background-color: lightpink;
  }

  .ear-advantage {
      background-color: white;
  }

  .ear-advantage.positive {
      background-color: lightblue;
  }

  .ear-advantage.negative {
      background-color: lightpink;
  }

  .play-pause {
    background-color: #008cba;
    height: 40px;
    width: 100%;
    padding: 0.375rem 0.5rem;
    border: 1px solid transparent;
    border-radius: 7.5px;
    transition: transform 0.3s ease;
    transform-origin: center;
  }

  .play-pause:hover {
    background-color: #0082ae;
    transform: scale(1.05);
  }
</style>

<body id="defBG" style="font-family: Arial !important; margin-bottom: 60px;">
  <div class="p-5 border bg-white ">
    <h1 class= "display-5", style='padding-bottom:20px;'><strong><%= "Training " + @client.first_name + " " + @client.last_name%></strong></h1>
    <%= form_with model: [@client, @week_one], local: true, html: { multipart: true } do |f| %>
      <div class="container">
        <div class="row">
          <div class="col-sm">
            <div class="form-group">
              <div>
                <p>Ear Dominance</p>
                <div style="display: flex;">
                  <%= button_to "Set Left Dominance", "#", class: "btn-1 btn-anim1", style: "min-width: 150px; margin-right:20px;" %>
                  <%= button_to "Set Right Dominance", "#", class: "btn-1 btn-anim1", style: "min-width: 150px;" %>
                </div>
              </div>
            </div>
            <div class="form-group">
              <div>
                <p>Audio Controls</p>
                <div id="controls">
                  <%= image_tag "pause.svg", id: "pauseButton", class: "play-pause", style: "display: none;" %>
                  <%= image_tag "play.svg", id: "playButton", class: "play-pause" %>
                </div>
                <p>Time Elapsed: <span id="timer">0:00</span> / <span id="duration">--:--</span></p>
              </div>
            </div>
            <div class="form-group">
              <label for="exampleLabel">Label</label>
              <%= f.text_field :label, class: "form-control", type: "text", id: "exampleLabel", value: "Week One Test Two" %>
            </div>
            <div class="form-group">
              <label for="clientName">Client</label>
              <input class="form-control" type="text" id="clientName" placeholder="<%= @client.first_name + ' ' + @client.last_name %>" readonly>
            </div>
            <div class="form-group">
              <label for="testType">Type</label>
              <input class="form-control" type="text" id="testType" placeholder="VA Double Digits" readonly>
            </div>
            <hr>
            <div class="sticky">
              <label for="Notes">Notes</label>
              <%= f.text_area :notes, class: 'form-control', rows: '3' %>
              <hr>
              <!--AUDIO PLAYER FOR AUDIO FILES STORED IN ASSETS/AUDIO/ETC.MP3-->
              <!-- ALLEARS, removed default controls and added ids for easier access across javascript, html, and so-->
              <%= audio_tag "2-pair Dichotic Digits, List 2.mp3", id: "testAudio", controls: false %>

              <!-- JavaScript to Handle Playback and Timer -->
              <script>
                document.addEventListener("DOMContentLoaded", function() {
                  const leftAudio = document.getElementById("testAudio");
                  const playButton = document.getElementById("playButton");
                  const pauseButton = document.getElementById("pauseButton");
                  const timerDisplay = document.getElementById("timer");
                  const durationDisplay = document.getElementById("duration");

                  // Function to format time as mm:ss
                  function formatTime(seconds) {
                    const minutes = Math.floor(seconds / 60);
                    const secs = Math.floor(seconds % 60);
                    return `${minutes}:${secs < 10 ? "0" : ""}${secs}`;
                  }

                  // Set total duration when data is loaded
                  testAudio.addEventListener("loadedmetadata", function() {
                    durationDisplay.textContent = formatTime(testAudio.duration);
                  });

                  // Update timer
                  testAudio.addEventListener("timeupdate", function() {
                    timerDisplay.textContent = formatTime(testAudio.currentTime);
                  });

                  // Play both audio files
                  playButton.addEventListener("click", function() {
                    playButton.style.display = "none";
                    pauseButton.style.display = "inline";
                    testAudio.play();
                  });

                  // Pause both audio files
                  pauseButton.addEventListener("click", function() {
                    playButton.style.display = "inline";
                    pauseButton.style.display = "none";
                    testAudio.pause();
                  });
                });
              </script>

              <p>Scores:</p>
              <table class="table table-sm table-bordered m1-4" style="max-width: 25rem;">
                <thead>
                  <tr>
                    <th scope="col">Pairs</th>
                    <th scope="col">Left</th>
                    <th scope="col">Right</th>
                    <th scope="col">Ear Adv</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <th scope="row">1</th>
                    <td class="left-column"><span id="column1Group1-percent">0</span>%</td>
                    <td class="right-column"><span id="column2Group1-percent">0</span>%</td>
                    <td class="ear-advantage"><span id="Group1advantage-Diff">0</span>%</td>
                  </tr>
                  <tr>
                    <th scope="row">2</th>
                    <td class="left-column"><span id="column1Group2-percent">0</span>%</td>
                    <td class="right-column"><span id="column2Group2-percent">0</span>%</td>
                    <td class="ear-advantage"><span id="Group2advantage-Diff">0</span>%</td>
                  </tr>
                  <tr>
                    <th scope="row">3</th>
                    <td class="left-column"><span id="column1Group3-percent">0</span>%</td>
                    <td class="right-column"><span id="column2Group3-percent">0</span>%</td>
                    <td class="ear-advantage"><span id="Group3advantage-Diff">0</span>%</td>
                  </tr>
                </tbody>
              </table>
              <!--Table for ear advantage that is calculated in the script and ear diagnosis/interpretation-->
              <label for="read-Only">Ear Advantage</label>
              <input class="form-control" type="text" id="read-Only" value="" readonly>
              <span hidden id="advantage-Name"></span>
            </div>
          </div>

          <div style="width: 1px; height: inherit; background-color: rgba(0, 0, 0, 0.1);"></div>

          <div class="col-sm" style="flex-grow: 3;">
            <table class="table table-sm table-striped">
              <thead class="thead-dark">
                <tr>
                  <th>Number</th>
                  <th>Left</th>
                  <th>Right</th>
                </tr>
              </thead>
              <tbody>
                <!-- Loop for table of numbers and creation of all buttons, only loops 54 times and creates table for buttons-->
                <% 25.times do |i| %>
                  <% nums = [
                    [[10,3],[2,9]],
                    [[10,6],[3,8]],
                    [[10,8],[5,1]],
                    [[6,9],[5,8]],
                    [[1,3],[2,5]],
                    [[5,2],[10,1]],
                    [[3,5],[6,9]],
                    [[8,10],[9,1]],
                    [[4,6],[5,2]],
                    [[10,8],[4,5]],
                    [[4,9],[8,2]],
                    [[5,10],[9,2]],
                    [[1,10],[9,3]],
                    [[5,2],[3,8]],
                    [[10,4],[8,1]],
                    [[6,2],[8,10]],
                    [[8,4],[5,3]],
                    [[3,4],[1,2]],
                    [[3,9],[4,5]],
                    [[9,3],[5,4]],
                    [[10,2],[6,4]],
                    [[8,6],[10,4]],
                    [[5,10],[6,4]],
                    [[3,2],[10,6]],
                    [[10,9],[1,3]]
                  ] %>
                  <tr>
                    <td><%= i + 1 %></td>

                    <td>
                      <div class="btn-group-toggle" data="buttons">
                        <% group_size = nums[i][0].length %>
                        <% nums[i][0].each_with_index do |num, index| %>
                          <% button_class = "column1Group#{group_size}-button" %>
                          <label class="btn btn-outline-primary <%= button_class %>">
                            <input type="checkbox" name="column1[<%= i %>][]" value="<%= num %>">
                            <%= num %>
                          </label>
                        <% end %>
                      </div>
                    </td>

                    <td>
                      <div class="btn-group-toggle" data="buttons">
                        <% group_size = nums[i][1].length %>
                        <% nums[i][1].each_with_index do |num, index| %>
                          <% button_class = "column2Group#{group_size}-button" %>
                          <label class="btn btn-outline-primary <%= button_class %>">
                            <input type="checkbox" name="column2[<%= i %>][]" value="<%= num %>">
                            <%= num %>
                          </label>
                        <% end %>
                      </div>
                    </td>
                  </tr>
                <% end %>
              </tbody>
              <!--Hidden table for submition items-->
            </table>


            <%= f.hidden_field :client_name, value: "Example user" %>
            <%= f.hidden_field :test_type, value: "RDDT" %>
            <%= f.hidden_field :counter, value: "2" %>
            <%= f.hidden_field :left_score2, id: "left_score" %>
            <%= f.hidden_field :right_score2, id: "right_score" %>
            <%= f.hidden_field :ear_advantage, id: "ear_advantage" %>
            <%= f.hidden_field :ear_advantage_score, id: "ear_advantage_score" %>

            <!-- ALLEARS ADDITIONS, added to submit as well-->

            <%= f.hidden_field :right_ear_decibel, id: "rightEarDecibelField" %>
            <%= f.hidden_field :right_ear_decibel, id: "leftEarDecibelField" %>

            <%= f.submit "Submit and Proceed", class: "btn-1 btn-anim2 btn-block", onclick: "calculateRightEarDecibel(); populateHiddenFields();" %>
            <%= link_to "Back", week_one_test_one_client_week_ones_path(@client), class: "btn-2 btn-anim2 btn-block" %>
          </div>

          <script>

            //function for keeping the buttons blue after being clicked
              const checkboxes = document.querySelectorAll('input[type="checkbox"]');

              checkboxes.forEach(function(checkbox) {
                checkbox.addEventListener('change', function() {
                  const label = this.closest('label');
                  if (this.checked) {
                    label.classList.add('active');
                  } else {
                    label.classList.remove('active');
                  }
                });
              });

              //script completes all logic for calculating diagnosis and ear advantage values, It updates the percentages and lists the ear diag and advantage
              // Get the toggle buttons and count elements
              const column1ButtonsGroup1 = document.querySelectorAll(".column1Group1-button input[type='checkbox']");
              const column1ButtonsGroup2 = document.querySelectorAll(".column1Group2-button input[type='checkbox']");
              const column1ButtonsGroup3 = document.querySelectorAll(".column1Group3-button input[type='checkbox']");
              const column2ButtonsGroup1 = document.querySelectorAll(".column2Group1-button input[type='checkbox']");
              const column2ButtonsGroup2 = document.querySelectorAll(".column2Group2-button input[type='checkbox']");
              const column2ButtonsGroup3 = document.querySelectorAll(".column2Group3-button input[type='checkbox']");

              const allButtons = document.querySelectorAll(".column1Group1-button input[type='checkbox'], .column1Group2-button input[type='checkbox'], .column1Group3-button input[type='checkbox'], .column2Group1-button input[type='checkbox'], .column2Group2-button input[type='checkbox'], .column2Group3-button input[type='checkbox']");

              const column1Count = document.getElementById("column1-count");
              const column2Count = document.getElementById("column2-count");

              const column1Group1Percent = document.getElementById("column1Group1-percent");
              const column1Group2Percent = document.getElementById("column1Group2-percent");
              const column1Group3Percent = document.getElementById("column1Group3-percent");
              const column2Group1Percent = document.getElementById("column2Group1-percent");
              const column2Group2Percent = document.getElementById("column2Group2-percent");
              const column2Group3Percent = document.getElementById("column2Group3-percent");


              const advantageDiffGroup1 = document.getElementById("Group1advantage-Diff");
              advantageDiffGroup1.innerText = group1Advantage.toString();

              const advantageDiffGroup2 = document.getElementById("Group2advantage-Diff");
              advantageDiffGroup2.innerText = group2Advantage.toString();

              const advantageDiffGroup3 = document.getElementById("Group3advantage-Diff");
              advantageDiffGroup3.innerText = group3Advantage.toString();



              const advantageName = document.getElementById("advantage-Name");
              const testDiagnosis = document.getElementById("Diagnosis");
              const readOnly = document.getElementById("read-Only");
              const readOnlyDiag = document.getElementById("read-Only-diag");



              // Update the counts when a button is clicked

              allButtons.forEach(function(button) {
                button.addEventListener("click", function() {
                const checkedCount1Group1 = document.querySelectorAll(".column1Group1-button input[type='checkbox']:checked").length;
                const checkedCount1Group2 = document.querySelectorAll(".column1Group2-button input[type='checkbox']:checked").length;
                const checkedCount1Group3 = document.querySelectorAll(".column1Group3-button input[type='checkbox']:checked").length;
                const checkedCount2Group1 = document.querySelectorAll(".column2Group1-button input[type='checkbox']:checked").length;
                const checkedCount2Group2 = document.querySelectorAll(".column2Group2-button input[type='checkbox']:checked").length;
                const checkedCount2Group3 = document.querySelectorAll(".column2Group3-button input[type='checkbox']:checked").length;

                const totalCountColumn1Group1 = column1ButtonsGroup1.length;
                const totalCountColumn1Group2 = column1ButtonsGroup2.length;
                const totalCountColumn1Group3 = column1ButtonsGroup3.length;
                const totalCountColumn2Group1 = column2ButtonsGroup1.length;
                const totalCountColumn2Group2 = column2ButtonsGroup2.length;
                const totalCountColumn2Group3 = column2ButtonsGroup3.length;


                const percentColumn1Group1 = ((checkedCount1Group1 / totalCountColumn1Group1) * 100).toFixed(2);
                const percentColumn1Group2 = ((checkedCount1Group2 / totalCountColumn1Group2) * 100).toFixed(2);
                const percentColumn1Group3 = ((checkedCount1Group3 / totalCountColumn1Group3) * 100).toFixed(2);
                const percentColumn2Group1 = ((checkedCount2Group1 / totalCountColumn2Group1) * 100).toFixed(2);
                const percentColumn2Group2 = ((checkedCount2Group2 / totalCountColumn2Group2) * 100).toFixed(2);
                const percentColumn2Group3 = ((checkedCount2Group3 / totalCountColumn2Group3) * 100).toFixed(2);

                const group1Advantage = (percentColumn2Group1 - percentColumn1Group1).toFixed(2);
                const group2Advantage = (percentColumn2Group2 - percentColumn1Group2).toFixed(2);
                const group3Advantage = (percentColumn2Group3 - percentColumn1Group3).toFixed(2);





                //calcs advantage side using average of all of them (ideal but not what client wants)

                /*
                const sumAdvantage = parseFloat(group1Advantage) + parseFloat(group2Advantage) + parseFloat(group3Advantage);
                const threshold = 0.01; // Define the threshold value for neutrality

                if (Math.abs(sumAdvantage) <= threshold) {
                  direction = "Neutral";
                } else if (sumAdvantage > 0) {
                  direction = "Left";
                } else {
                  direction = "Right";
                }
                */

                //ALLEARS ADDITIONS
                let rightEarDecibel; // Default hardcoded value, CHANGE TO SERVER-side later (SO GET VALUE instead hard code)
                let leftEarDecibel; // this is not yet attempted set up for server side at all, unlike right

                let direction = null;
                let interpretation = null;
                let age = <%= @client.age_in_years %>;
                let dom = null;
                let nondom = null;

                if (group2Advantage < 0) {
                  direction = "Left";
                  dom = percentColumn1Group2;
                  nondom = percentColumn2Group2;
                } else if (group2Advantage > 0) {
                  direction = "Right";
                  dom = percentColumn2Group2;
                  nondom = percentColumn1Group2;
                } else {
                  direction = "Neutral";
                }



                // Passes values to strings so they can be pushed to the html above


                column1Group1Percent.innerText = percentColumn1Group1.toString();
                column1Group2Percent.innerText = percentColumn1Group2.toString();
                column1Group3Percent.innerText = percentColumn1Group3.toString();

                column2Group1Percent.innerText = percentColumn2Group1.toString();
                column2Group2Percent.innerText = percentColumn2Group2.toString();
                column2Group3Percent.innerText = percentColumn2Group3.toString();



                advantageDiffGroup1.innerText = group1Advantage.toString();
                advantageDiffGroup2.innerText = group2Advantage.toString();
                advantageDiffGroup3.innerText = group3Advantage.toString();


                advantageName.innerText = direction;
                readOnly.value = advantageName.innerText;


                testDiagnosis.innerText = interpretation;
                readOnlyDiag.value = testDiagnosis.innerText;

                const earAdvantageCells = document.querySelectorAll('.ear-advantage');
                // Loop through each ear advantage cell
                earAdvantageCells.forEach(cell => {
                  // Get the value of the cell
                  const value = parseFloat(cell.textContent);

                  // Check the value and set the background color accordingly
                  if (value < 0) {
                    cell.style.backgroundColor = 'lightblue';
                  } else if (value > 0) {
                    cell.style.backgroundColor = 'lightpink';
                  } else {
                    cell.style.backgroundColor = 'white';
                  }
                });
                })
              })
            // gets the elements from hidden field submit above and populates them from the results in the script
            function populateHiddenFields() {
              document.getElementById("left_score").value = column1Group2Percent.innerText;
              document.getElementById("right_score").value = column2Group2Percent.innerText;
              document.getElementById("ear_advantage").value = advantageName.innerText;
              document.getElementById("ear_advantage_score").value = advantageDiffGroup2.innerText;

            }

            //ALLEARS ADDITIONS
            // only works for first group rn, copy paste for more when relevant to test
            function calculateRightEarDecibel() {

              const checkedCount1Group1 = document.querySelectorAll(".column1Group1-button input[type='checkbox']:checked").length;
              const checkedCount2Group1 = document.querySelectorAll(".column2Group1-button input[type='checkbox']:checked").length;



              if (checkedCount1Group1 >= (checkedCount2Group1 * 1.1)) {
                rightEarDecibel = 35;
              }
              // SETS VALUE of hidden field
              document.getElementById("rightEarDecibelField").value = rightEarDecibel;
            }
            //functions for setting ear dominance
            function setEarDominance(dominance) {
            // Assuming rightEarDecibel changes based on ear dominance
              if (dominance === 'left') {
                rightEarDecibel = 50;
                leftEarDecibel = 30;
              } else if (dominance === 'right') {
                rightEarDecibel = 30;
                leftEarDecibel = 50;
              }
              document.getElementById("rightEarDecibelField").value = rightEarDecibel;
              document.getElementById("leftEarDecibelField").value = leftEarDecibel;
              document.getElementById('rightEarDecibelDisplay').innerText = document.getElementById("rightEarDecibelField").value;
              document.getElementById('leftEarDecibelDisplay').innerText = document.getElementById("leftEarDecibelField").value;
            }
            //separate testing function, can be commented/deleted later
            // This is working, problem is with the user data then
            function testRightEarDecibelUpdate() {
              calculateRightEarDecibel();
              // Update display of rightEarDecibel
              document.getElementById('rightEarDecibelDisplay').innerText = document.getElementById("rightEarDecibelField").value;
            }
            //ALLEARS Audio control listener, buttons
            document.addEventListener('DOMContentLoaded', (event) => {
              const leftEarAudio = document.getElementById('leftEarAudio');
              const rightEarAudio = document.getElementById('rightEarAudio');

              // Play button event
              document.getElementById('playButton').addEventListener('click', function() {
                leftEarAudio.play();
                rightEarAudio.play();
              });

              // Pause button event
              document.getElementById('pauseButton').addEventListener('click', function() {
                leftEarAudio.pause();
                rightEarAudio.pause();
              });
              document.getElementById('setLeftDominance').addEventListener('click', function() {
              setEarDominance('left');
              });

              document.getElementById('setRightDominance').addEventListener('click', function() {
              setEarDominance('right');
              });
            });

            function submitAndExit() {
              // Calculate right ear decibel and populate hidden fields
                calculateRightEarDecibel();
                populateHiddenFields();

              // Redirect to the client training index page
                window.location.href = '<%= client_trainings_path(@client) %>';
            }

          </script>
        </div>
      </div>
    <% end %>
  </div>
</body>
