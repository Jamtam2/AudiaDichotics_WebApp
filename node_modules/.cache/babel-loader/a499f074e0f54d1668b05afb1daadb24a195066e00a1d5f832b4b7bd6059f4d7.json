{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _microphone = require('./microphone');\nvar _microphone2 = _interopRequireDefault(_microphone);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar defaultConfig = {\n  nFrequencyBars: 255,\n  onAnalysed: null\n};\nvar Recorder = function () {\n  function Recorder(audioContext) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Recorder);\n    this.config = Object.assign({}, defaultConfig, config);\n    this.audioContext = audioContext;\n    this.audioInput = null;\n    this.realAudioInput = null;\n    this.inputPoint = null;\n    this.audioRecorder = null;\n    this.rafID = null;\n    this.analyserContext = null;\n    this.recIndex = 0;\n    this.stream = null;\n    this.updateAnalysers = this.updateAnalysers.bind(this);\n  }\n  _createClass(Recorder, [{\n    key: 'init',\n    value: function init(stream) {\n      var _this = this;\n      return new Promise(function (resolve) {\n        _this.inputPoint = _this.audioContext.createGain();\n        _this.stream = stream;\n        _this.realAudioInput = _this.audioContext.createMediaStreamSource(stream);\n        _this.audioInput = _this.realAudioInput;\n        _this.audioInput.connect(_this.inputPoint);\n        _this.analyserNode = _this.audioContext.createAnalyser();\n        _this.analyserNode.fftSize = 2048;\n        _this.inputPoint.connect(_this.analyserNode);\n        _this.audioRecorder = new _microphone2[\"default\"](_this.inputPoint);\n        var zeroGain = _this.audioContext.createGain();\n        zeroGain.gain.value = 0.0;\n        _this.inputPoint.connect(zeroGain);\n        zeroGain.connect(_this.audioContext.destination);\n        _this.updateAnalysers();\n        resolve();\n      });\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this2 = this;\n      return new Promise(function (resolve, reject) {\n        if (!_this2.audioRecorder) {\n          reject('Not currently recording');\n          return;\n        }\n        _this2.audioRecorder.clear();\n        _this2.audioRecorder.record();\n        resolve(_this2.stream);\n      });\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      var _this3 = this;\n      return new Promise(function (resolve) {\n        _this3.audioRecorder.stop();\n        _this3.audioRecorder.getBuffer(function (buffer) {\n          _this3.audioRecorder.exportWAV(function (blob) {\n            return resolve({\n              buffer: buffer,\n              blob: blob\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: 'updateAnalysers',\n    value: function updateAnalysers() {\n      if (this.config.onAnalysed) {\n        requestAnimationFrame(this.updateAnalysers);\n        var freqByteData = new Uint8Array(this.analyserNode.frequencyBinCount);\n        this.analyserNode.getByteFrequencyData(freqByteData);\n        var data = new Array(255);\n        var lastNonZero = 0;\n        var datum = void 0;\n        for (var idx = 0; idx < 255; idx += 1) {\n          datum = Math.floor(freqByteData[idx]) - Math.floor(freqByteData[idx]) % 5;\n          if (datum !== 0) {\n            lastNonZero = idx;\n          }\n          data[idx] = datum;\n        }\n        this.config.onAnalysed({\n          data: data,\n          lineTo: lastNonZero\n        });\n      }\n    }\n  }, {\n    key: 'setOnAnalysed',\n    value: function setOnAnalysed(handler) {\n      this.config.onAnalysed = handler;\n    }\n  }]);\n  return Recorder;\n}();\nRecorder.download = function download(blob) {\n  var filename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'audio';\n  _microphone2[\"default\"].forceDownload(blob, filename + '.wav');\n};\nexports[\"default\"] = Recorder;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}